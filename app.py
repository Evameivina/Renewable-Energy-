# -*- coding: utf-8 -*-
"""App.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1VEh1DzEfx4B-t56iAY0A2U79YrtYf_jD

### Import Library
"""

import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns

"""### Load Dataset"""

file_path = "https://raw.githubusercontent.com/Evameivina/Renewable-Energy-/refs/heads/main/global_renewable_energy_production.csv"
df = pd.read_csv(file_path)

print("Dataset Preview:")
print(df.head())

"""### Data Wrangling"""

print("\nInformasi dataset:")
df.info()

energy_cols = ['SolarEnergy','WindEnergy','HydroEnergy','OtherRenewableEnergy','TotalRenewableEnergy']

# Cek konsistensi total
df['CheckTotal'] = df[['SolarEnergy','WindEnergy','HydroEnergy','OtherRenewableEnergy']].sum(axis=1)
inconsistent = df[df['CheckTotal'] != df['TotalRenewableEnergy']]
print("Jumlah baris dengan total energi tidak konsisten:", len(inconsistent))

df.loc[inconsistent.index, 'TotalRenewableEnergy'] = df.loc[inconsistent.index, ['SolarEnergy','WindEnergy','HydroEnergy','OtherRenewableEnergy']].sum(axis=1)

df = df.drop(inconsistent.index)
print("Jumlah baris setelah hapus yang tidak konsisten:", len(df))

print("Missing values per kolom:")
print(df.isnull().sum())

df['CheckTotal'] = df[['SolarEnergy','WindEnergy','HydroEnergy','OtherRenewableEnergy']].sum(axis=1)
inconsistent = df[df['CheckTotal'] != df['TotalRenewableEnergy']]
print("Jumlah baris dengan total energi tidak konsisten:", len(inconsistent))

"""### EDA (Exploratory Data Analysis)"""

energy_cols = ['SolarEnergy','WindEnergy','HydroEnergy','OtherRenewableEnergy','TotalRenewableEnergy']
print("\nDescriptive statistics:")
print(df[energy_cols].describe())

# Jumlah negara dan range tahun
print("Jumlah negara:", df['Country'].nunique())
print("Range tahun:", df['Year'].min(), "-", df['Year'].max())

# Distribusi energi per jenis (histogram)
for col in energy_cols:
    plt.figure(figsize=(8,4))
    sns.histplot(df[col], bins=30, kde=True, color='skyblue')
    plt.title(f"Distribution of {col}")
    plt.xlabel("Energy Production (GWh)")
    plt.ylabel("Frequency")
    plt.show()

# Dominant energy type per negara (tahun terakhir)
def dominant_energy(row):
    return row[['SolarEnergy','WindEnergy','HydroEnergy','OtherRenewableEnergy']].idxmax()

latest_year = df['Year'].max()
latest_df = df[df['Year'] == latest_year].copy()
latest_df['DominantEnergy'] = latest_df.apply(dominant_energy, axis=1)
print("\nDominant Energy Type per Country (Latest Year):")
print(latest_df[['Country','DominantEnergy','TotalRenewableEnergy']])

"""### Visualisasi"""

# Distribusi energi per jenis
for col in energy_cols:
    plt.figure(figsize=(8,4))
    sns.histplot(df[col], bins=30, kde=True, color='skyblue')
    plt.title(f"Distribution of {col}")
    plt.xlabel("Energy Production (GWh)")
    plt.ylabel("Frequency")
    plt.show()

# Tren energi per jenis (5 negara contoh)
selected_countries = df['Country'].unique()[:5]
for energy in ['SolarEnergy','WindEnergy','HydroEnergy','OtherRenewableEnergy']:
    plt.figure(figsize=(10,5))
    for country in selected_countries:
        country_data = df[df['Country']==country]
        plt.plot(country_data['Year'], country_data[energy], marker='o', label=country)
    plt.title(f"{energy} Production Over Time")
    plt.xlabel("Year")
    plt.ylabel("Energy Production (GWh)")
    plt.legend()
    plt.grid(True)
    plt.show()

# Total energi per negara
total_energy = df.groupby('Country')['TotalRenewableEnergy'].sum().sort_values(ascending=False)
plt.figure(figsize=(12,6))
total_energy.plot(kind='bar', color='green')
plt.title("Total Renewable Energy per Country (2000-2023)")
plt.ylabel("Energy Production (GWh)")
plt.xlabel("Country")
plt.show()

# Korelasi antar jenis energi
plt.figure(figsize=(8,5))
sns.heatmap(df[energy_cols].corr(), annot=True, cmap="coolwarm")
plt.title("Correlation Matrix Between Energy Types")
plt.show()

# Boxplot untuk sebaran & outlier
plt.figure(figsize=(10,6))
sns.boxplot(data=df[energy_cols])
plt.title("Boxplot of Renewable Energy Types")
plt.ylabel("Energy Production (GWh)")
plt.xticks(rotation=15)
plt.show()

"""### Forecasting"""

# Forecast total energi global per tahun
from sklearn.linear_model import LinearRegression
import numpy as np

global_total = df.groupby('Year')['TotalRenewableEnergy'].sum().reset_index()
X = global_total[['Year']]
y = global_total['TotalRenewableEnergy']

model_total = LinearRegression()
model_total.fit(X, y)

future_years = pd.DataFrame({'Year':[2024, 2025, 2026, 2027, 2028]})
pred_total = model_total.predict(future_years)

for year, pred in zip(future_years['Year'], pred_total):
    print(f"Predicted Total Renewable Energy in {year}: {pred:.2f} GWh")

# Forecast tiap jenis energi global
future_years = pd.DataFrame({'Year':[2024, 2025, 2026, 2027, 2028]})  # pastikan kolom 'Year'

for energy in ['SolarEnergy','WindEnergy','HydroEnergy','OtherRenewableEnergy']:
    global_energy = df.groupby('Year')[energy].sum().reset_index()
    X_energy = global_energy[['Year']]
    y_energy = global_energy[energy]

    model = LinearRegression()
    model.fit(X_energy, y_energy)

    pred = model.predict(future_years)

    print(f"Predicted {energy} (GWh) for 2024-2028:")
    for year, val in zip(future_years['Year'], pred):  # ambil kolom 'Year' sebagai iterable
        print(f"{year}: {val:.2f}")

